/*
 * Tax Location Validation Service Adapter SPI
 * ## Overview Location validate is a Service Provider Interface (SPI) that helps Chargebee communicate with API platforms providing the following services: - Validate location of customer  If you have an API that provides the services mentioned above and want Chargebee to be able to integrate with it, you can build an adapter service according to this specification.  ## Terminology Here's a list of terms we've used to describe this specification. ### Merchant    Chargebee’s customer who is carrying out the business of selling products. Also known as the Seller. The Seller has one or more Chargebee accounts. ### Chargebee   The SaaS which manages subscriptions and revenue operations on behalf of the Merchant. Chargebee makes API calls to the Tax Service Adapter for tax estimation and tax filing of transactions between the Merchant and the Customer. ### Customer  Merchant’s customer who purchases products from the Merchant. Their customer record(s) and other details are stored within Chargebee under the Merchant’s account. ### Service Provider The service which provides services for merchants. ### Service Adapter  The SPI for which the spec is defined in this document. This adapter serves the following purposes: - Translates API requests (as defined in this document) from Chargebee to the request format specified by the Service Provider's API. - Translates API responses from the Service Provider APIs to the format understood by Chargebee (as defined in this document). ### Authorization Chargebee uses HTTP header-based authorization for all the API endpoints associated with Service Adapter. We dynamically pass this authorization key in the HTTP header. The parameter that holds this key is found in the JSON object `api_configuration` required for configuring your onboarding on Chargebee's marketplace. In the `api_configuration` object, our [Taxes Service Adapter SPI](https://chargebee.atlassian.net/l/cp/ca5aZ1mA) checks the authorization key parameter from `credential_configuration.id` and creates the HTTP header-based input query parameter for authorization. The `credential_configuration` is an array of objects with an `id` attribute, and the value of `id` is the parameter containing the authorization key.    Following are the JSON snippets for your reference.     ```json       \"api_configuration\": {           \"api_base_url\": \"https://xyz.abc.com/chargebee\",           \"credential_configuration\": [              {               \"id\":\"authorization_key\",               \"name\": \"Authorization Key\",                \"type\": \"text\",               \"is_sensitive\": true              },             {               \"id\": \"client_secret\",               \"name\": \"Client Secret\",               \"type\": \"text\",               \"is_sensitive\": true             }           ]         }    ``` 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.chargebee.spi.location_validation.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.chargebee.spi.location_validation.client.JSON;

/**
 * Source country identified from each evidence
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class EvidenceOrigin {
  public static final String SERIALIZED_NAME_TAX_REGISTRATION_NUMBER = "taxRegistrationNumber";
  @SerializedName(SERIALIZED_NAME_TAX_REGISTRATION_NUMBER)
  private String taxRegistrationNumber;

  public static final String SERIALIZED_NAME_IP = "ip";
  @SerializedName(SERIALIZED_NAME_IP)
  private String ip;

  public static final String SERIALIZED_NAME_BIN = "bin";
  @SerializedName(SERIALIZED_NAME_BIN)
  private String bin;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private String phone;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_TAX_IDENTIFIERS = "taxIdentifiers";
  @SerializedName(SERIALIZED_NAME_TAX_IDENTIFIERS)
  private String taxIdentifiers;

  public EvidenceOrigin() {
  }

  public EvidenceOrigin taxRegistrationNumber(String taxRegistrationNumber) {
    
    this.taxRegistrationNumber = taxRegistrationNumber;
    return this;
  }

   /**
   * Source country from Tax registration number of the customer.
   * @return taxRegistrationNumber
  **/
  @javax.annotation.Nullable
  public String getTaxRegistrationNumber() {
    return taxRegistrationNumber;
  }


  public void setTaxRegistrationNumber(String taxRegistrationNumber) {
    this.taxRegistrationNumber = taxRegistrationNumber;
  }


  public EvidenceOrigin ip(String ip) {
    
    this.ip = ip;
    return this;
  }

   /**
   * Source country from IP address of the customer.
   * @return ip
  **/
  @javax.annotation.Nullable
  public String getIp() {
    return ip;
  }


  public void setIp(String ip) {
    this.ip = ip;
  }


  public EvidenceOrigin bin(String bin) {
    
    this.bin = bin;
    return this;
  }

   /**
   * Source country from BIN of primary card.
   * @return bin
  **/
  @javax.annotation.Nullable
  public String getBin() {
    return bin;
  }


  public void setBin(String bin) {
    this.bin = bin;
  }


  public EvidenceOrigin phone(String phone) {
    
    this.phone = phone;
    return this;
  }

   /**
   * Source country from Phone number of customer.
   * @return phone
  **/
  @javax.annotation.Nullable
  public String getPhone() {
    return phone;
  }


  public void setPhone(String phone) {
    this.phone = phone;
  }


  public EvidenceOrigin address(String address) {
    
    this.address = address;
    return this;
  }

   /**
   * Source country from address of customer.
   * @return address
  **/
  @javax.annotation.Nullable
  public String getAddress() {
    return address;
  }


  public void setAddress(String address) {
    this.address = address;
  }


  public EvidenceOrigin taxIdentifiers(String taxIdentifiers) {
    
    this.taxIdentifiers = taxIdentifiers;
    return this;
  }

   /**
   * Source country from Tax Identifiers of customer.
   * @return taxIdentifiers
  **/
  @javax.annotation.Nullable
  public String getTaxIdentifiers() {
    return taxIdentifiers;
  }


  public void setTaxIdentifiers(String taxIdentifiers) {
    this.taxIdentifiers = taxIdentifiers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EvidenceOrigin evidenceOrigin = (EvidenceOrigin) o;
    return Objects.equals(this.taxRegistrationNumber, evidenceOrigin.taxRegistrationNumber) &&
        Objects.equals(this.ip, evidenceOrigin.ip) &&
        Objects.equals(this.bin, evidenceOrigin.bin) &&
        Objects.equals(this.phone, evidenceOrigin.phone) &&
        Objects.equals(this.address, evidenceOrigin.address) &&
        Objects.equals(this.taxIdentifiers, evidenceOrigin.taxIdentifiers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(taxRegistrationNumber, ip, bin, phone, address, taxIdentifiers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EvidenceOrigin {\n");
    sb.append("    taxRegistrationNumber: ").append(toIndentedString(taxRegistrationNumber)).append("\n");
    sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    sb.append("    bin: ").append(toIndentedString(bin)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    taxIdentifiers: ").append(toIndentedString(taxIdentifiers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("taxRegistrationNumber");
    openapiFields.add("ip");
    openapiFields.add("bin");
    openapiFields.add("phone");
    openapiFields.add("address");
    openapiFields.add("taxIdentifiers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to EvidenceOrigin
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EvidenceOrigin.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EvidenceOrigin is not found in the empty JSON string", EvidenceOrigin.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EvidenceOrigin.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EvidenceOrigin` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("taxRegistrationNumber") != null && !jsonObj.get("taxRegistrationNumber").isJsonNull()) && !jsonObj.get("taxRegistrationNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxRegistrationNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxRegistrationNumber").toString()));
      }
      if ((jsonObj.get("ip") != null && !jsonObj.get("ip").isJsonNull()) && !jsonObj.get("ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip").toString()));
      }
      if ((jsonObj.get("bin") != null && !jsonObj.get("bin").isJsonNull()) && !jsonObj.get("bin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bin").toString()));
      }
      if ((jsonObj.get("phone") != null && !jsonObj.get("phone").isJsonNull()) && !jsonObj.get("phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone").toString()));
      }
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if ((jsonObj.get("taxIdentifiers") != null && !jsonObj.get("taxIdentifiers").isJsonNull()) && !jsonObj.get("taxIdentifiers").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxIdentifiers` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxIdentifiers").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EvidenceOrigin.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EvidenceOrigin' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EvidenceOrigin> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EvidenceOrigin.class));

       return (TypeAdapter<T>) new TypeAdapter<EvidenceOrigin>() {
           @Override
           public void write(JsonWriter out, EvidenceOrigin value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EvidenceOrigin read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EvidenceOrigin given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EvidenceOrigin
  * @throws IOException if the JSON string is invalid with respect to EvidenceOrigin
  */
  public static EvidenceOrigin fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EvidenceOrigin.class);
  }

 /**
  * Convert an instance of EvidenceOrigin to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

