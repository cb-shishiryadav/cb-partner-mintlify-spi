/*
 * Tax Registration Number Validation Service Adapter SPI
 * ## Overview Tax registration number validate is a Service Provider Interface (SPI) that helps Chargebee communicate with API platforms providing the following services: - Validate tax registration number - Validate tax registration numbers in batch  If you have an API that provides the services mentioned above and want Chargebee to be able to integrate with it, you can build an adapter service according to this specification.  ## Terminology Here's a list of terms we've used to describe this specification. ### Merchant    Chargebee’s customer who is carrying out the business of selling products. Also known as the Seller. The Seller has one or more Chargebee accounts. ### Chargebee   The SaaS which manages subscriptions and revenue operations on behalf of the Merchant. Chargebee makes API calls to the Tax Service Adapter for tax estimation and tax filing of transactions between the Merchant and the Customer. ### Customer  Merchant’s customer who purchases products from the Merchant. Their customer record(s) and other details are stored within Chargebee under the Merchant’s account. ### Service Provider The service which provides services for merchants. ### Service Adapter  The SPI for which the spec is defined in this document. This adapter serves the following purposes: - Translates API requests (as defined in this document) from Chargebee to the request format specified by the Service Provider's API. - Translates API responses from the Service Provider APIs to the format understood by Chargebee (as defined in this document). ### Authorization Chargebee uses HTTP header-based authorization for all the API endpoints associated with Service Adapter. We dynamically pass this authorization key in the HTTP header. The parameter that holds this key is found in the JSON object `api_configuration` required for configuring your onboarding on Chargebee's marketplace. In the `api_configuration` object, our [Taxes Service Adapter SPI](https://chargebee.atlassian.net/l/cp/ca5aZ1mA) checks the authorization key parameter from `credential_configuration.id` and creates the HTTP header-based input query parameter for authorization. The `credential_configuration` is an array of objects with an `id` attribute, and the value of `id` is the parameter containing the authorization key.      Following are the JSON snippets for your reference.       ```json       \"api_configuration\": {           \"api_base_url\": \"https://xyz.abc.com/chargebee\",           \"credential_configuration\": [              {               \"id\":\"authorization_key\",               \"name\": \"Authorization Key\",                \"type\": \"text\",               \"is_sensitive\": true              },             {               \"id\": \"client_secret\",               \"name\": \"Client Secret\",               \"type\": \"text\",               \"is_sensitive\": true             }           ]         }    ``` 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.chargebee.spi.trn.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.chargebee.spi.trn.model.Country;
import org.chargebee.spi.trn.model.TrnType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.chargebee.spi.trn.client.JSON;

/**
 * Contains the required properties for tax registration number validation request
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TrnValidateRequest {
  public static final String SERIALIZED_NAME_TRN = "trn";
  @SerializedName(SERIALIZED_NAME_TRN)
  private String trn;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private Country country;

  public static final String SERIALIZED_NAME_TRN_TYPE = "trnType";
  @SerializedName(SERIALIZED_NAME_TRN_TYPE)
  private TrnType trnType;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_VALID_ON = "validOn";
  @SerializedName(SERIALIZED_NAME_VALID_ON)
  private String validOn;

  public static final String SERIALIZED_NAME_REQUESTER_TRN = "requesterTrn";
  @SerializedName(SERIALIZED_NAME_REQUESTER_TRN)
  private String requesterTrn;

  public static final String SERIALIZED_NAME_TAX_OFFICE_CODE = "taxOfficeCode";
  @SerializedName(SERIALIZED_NAME_TAX_OFFICE_CODE)
  private String taxOfficeCode;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "externalId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  private String externalId;

  public TrnValidateRequest() {
  }

  public TrnValidateRequest trn(String trn) {
    
    this.trn = trn;
    return this;
  }

   /**
   * Tax registration number
   * @return trn
  **/
  @javax.annotation.Nonnull
  public String getTrn() {
    return trn;
  }


  public void setTrn(String trn) {
    this.trn = trn;
  }


  public TrnValidateRequest country(Country country) {
    
    this.country = country;
    return this;
  }

   /**
   * Get country
   * @return country
  **/
  @javax.annotation.Nonnull
  public Country getCountry() {
    return country;
  }


  public void setCountry(Country country) {
    this.country = country;
  }


  public TrnValidateRequest trnType(TrnType trnType) {
    
    this.trnType = trnType;
    return this;
  }

   /**
   * Get trnType
   * @return trnType
  **/
  @javax.annotation.Nullable
  public TrnType getTrnType() {
    return trnType;
  }


  public void setTrnType(TrnType trnType) {
    this.trnType = trnType;
  }


  public TrnValidateRequest name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Name of the tag registration number owner
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public TrnValidateRequest validOn(String validOn) {
    
    this.validOn = validOn;
    return this;
  }

   /**
   * Validate tax registration number on given date
   * @return validOn
  **/
  @javax.annotation.Nullable
  public String getValidOn() {
    return validOn;
  }


  public void setValidOn(String validOn) {
    this.validOn = validOn;
  }


  public TrnValidateRequest requesterTrn(String requesterTrn) {
    
    this.requesterTrn = requesterTrn;
    return this;
  }

   /**
   * Tax registration number of the entity or person who is requesting validation
   * @return requesterTrn
  **/
  @javax.annotation.Nullable
  public String getRequesterTrn() {
    return requesterTrn;
  }


  public void setRequesterTrn(String requesterTrn) {
    this.requesterTrn = requesterTrn;
  }


  public TrnValidateRequest taxOfficeCode(String taxOfficeCode) {
    
    this.taxOfficeCode = taxOfficeCode;
    return this;
  }

   /**
   * Code of the tax office, some country need it to validate tax registration number
   * @return taxOfficeCode
  **/
  @javax.annotation.Nullable
  public String getTaxOfficeCode() {
    return taxOfficeCode;
  }


  public void setTaxOfficeCode(String taxOfficeCode) {
    this.taxOfficeCode = taxOfficeCode;
  }


  public TrnValidateRequest externalId(String externalId) {
    
    this.externalId = externalId;
    return this;
  }

   /**
   * Way to relate the request and response, if passed then the same value should be returned in response
   * @return externalId
  **/
  @javax.annotation.Nullable
  public String getExternalId() {
    return externalId;
  }


  public void setExternalId(String externalId) {
    this.externalId = externalId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TrnValidateRequest trnValidateRequest = (TrnValidateRequest) o;
    return Objects.equals(this.trn, trnValidateRequest.trn) &&
        Objects.equals(this.country, trnValidateRequest.country) &&
        Objects.equals(this.trnType, trnValidateRequest.trnType) &&
        Objects.equals(this.name, trnValidateRequest.name) &&
        Objects.equals(this.validOn, trnValidateRequest.validOn) &&
        Objects.equals(this.requesterTrn, trnValidateRequest.requesterTrn) &&
        Objects.equals(this.taxOfficeCode, trnValidateRequest.taxOfficeCode) &&
        Objects.equals(this.externalId, trnValidateRequest.externalId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(trn, country, trnType, name, validOn, requesterTrn, taxOfficeCode, externalId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TrnValidateRequest {\n");
    sb.append("    trn: ").append(toIndentedString(trn)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    trnType: ").append(toIndentedString(trnType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    validOn: ").append(toIndentedString(validOn)).append("\n");
    sb.append("    requesterTrn: ").append(toIndentedString(requesterTrn)).append("\n");
    sb.append("    taxOfficeCode: ").append(toIndentedString(taxOfficeCode)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("trn");
    openapiFields.add("country");
    openapiFields.add("trnType");
    openapiFields.add("name");
    openapiFields.add("validOn");
    openapiFields.add("requesterTrn");
    openapiFields.add("taxOfficeCode");
    openapiFields.add("externalId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("trn");
    openapiRequiredFields.add("country");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TrnValidateRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TrnValidateRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TrnValidateRequest is not found in the empty JSON string", TrnValidateRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TrnValidateRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TrnValidateRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TrnValidateRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("trn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trn").toString()));
      }
      // validate the required field `country`
      Country.validateJsonElement(jsonObj.get("country"));
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("validOn") != null && !jsonObj.get("validOn").isJsonNull()) && !jsonObj.get("validOn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `validOn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("validOn").toString()));
      }
      if ((jsonObj.get("requesterTrn") != null && !jsonObj.get("requesterTrn").isJsonNull()) && !jsonObj.get("requesterTrn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requesterTrn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requesterTrn").toString()));
      }
      if ((jsonObj.get("taxOfficeCode") != null && !jsonObj.get("taxOfficeCode").isJsonNull()) && !jsonObj.get("taxOfficeCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxOfficeCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxOfficeCode").toString()));
      }
      if ((jsonObj.get("externalId") != null && !jsonObj.get("externalId").isJsonNull()) && !jsonObj.get("externalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TrnValidateRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TrnValidateRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TrnValidateRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TrnValidateRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<TrnValidateRequest>() {
           @Override
           public void write(JsonWriter out, TrnValidateRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TrnValidateRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TrnValidateRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TrnValidateRequest
  * @throws IOException if the JSON string is invalid with respect to TrnValidateRequest
  */
  public static TrnValidateRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TrnValidateRequest.class);
  }

 /**
  * Convert an instance of TrnValidateRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

