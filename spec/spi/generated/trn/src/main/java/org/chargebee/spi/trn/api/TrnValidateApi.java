/*
 * Tax Registration Number Validation Service Adapter SPI
 * ## Overview Tax registration number validate is a Service Provider Interface (SPI) that helps Chargebee communicate with API platforms providing the following services: - Validate tax registration number - Validate tax registration numbers in batch  If you have an API that provides the services mentioned above and want Chargebee to be able to integrate with it, you can build an adapter service according to this specification.  ## Terminology Here's a list of terms we've used to describe this specification. ### Merchant    Chargebee’s customer who is carrying out the business of selling products. Also known as the Seller. The Seller has one or more Chargebee accounts. ### Chargebee   The SaaS which manages subscriptions and revenue operations on behalf of the Merchant. Chargebee makes API calls to the Tax Service Adapter for tax estimation and tax filing of transactions between the Merchant and the Customer. ### Customer  Merchant’s customer who purchases products from the Merchant. Their customer record(s) and other details are stored within Chargebee under the Merchant’s account. ### Service Provider The service which provides services for merchants. ### Service Adapter  The SPI for which the spec is defined in this document. This adapter serves the following purposes: - Translates API requests (as defined in this document) from Chargebee to the request format specified by the Service Provider's API. - Translates API responses from the Service Provider APIs to the format understood by Chargebee (as defined in this document). ### Authorization Chargebee uses HTTP header-based authorization for all the API endpoints associated with Service Adapter. We dynamically pass this authorization key in the HTTP header. The parameter that holds this key is found in the JSON object `api_configuration` required for configuring your onboarding on Chargebee's marketplace. In the `api_configuration` object, our [Taxes Service Adapter SPI](https://chargebee.atlassian.net/l/cp/ca5aZ1mA) checks the authorization key parameter from `credential_configuration.id` and creates the HTTP header-based input query parameter for authorization. The `credential_configuration` is an array of objects with an `id` attribute, and the value of `id` is the parameter containing the authorization key.      Following are the JSON snippets for your reference.       ```json       \"api_configuration\": {           \"api_base_url\": \"https://xyz.abc.com/chargebee\",           \"credential_configuration\": [              {               \"id\":\"authorization_key\",               \"name\": \"Authorization Key\",                \"type\": \"text\",               \"is_sensitive\": true              },             {               \"id\": \"client_secret\",               \"name\": \"Client Secret\",               \"type\": \"text\",               \"is_sensitive\": true             }           ]         }    ``` 
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.chargebee.spi.trn.api;

import org.chargebee.spi.trn.client.ApiCallback;
import org.chargebee.spi.trn.client.ApiClient;
import org.chargebee.spi.trn.client.ApiException;
import org.chargebee.spi.trn.client.ApiResponse;
import org.chargebee.spi.trn.client.Configuration;
import org.chargebee.spi.trn.client.Pair;
import org.chargebee.spi.trn.client.ProgressRequestBody;
import org.chargebee.spi.trn.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.chargebee.spi.trn.model.BasicErrorResponse;
import org.chargebee.spi.trn.model.HealthCheckResponse;
import org.chargebee.spi.trn.model.TrnValidateBatchDeleteResponse;
import org.chargebee.spi.trn.model.TrnValidateBatchRequest;
import org.chargebee.spi.trn.model.TrnValidateBatchResponse;
import org.chargebee.spi.trn.model.TrnValidateErrorResponse;
import org.chargebee.spi.trn.model.TrnValidateRequest;
import org.chargebee.spi.trn.model.TrnValidateResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TrnValidateApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TrnValidateApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TrnValidateApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteTrnValidateBatch
     * @param batchId The unique batch request identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the request of batch of tax registration numbers validation. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error while processing request. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unhealthy. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTrnValidateBatchCall(String batchId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/trn/validate/batch/{batchId}"
            .replace("{" + "batchId" + "}", localVarApiClient.escapeString(batchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTrnValidateBatchValidateBeforeCall(String batchId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'batchId' is set
        if (batchId == null) {
            throw new ApiException("Missing the required parameter 'batchId' when calling deleteTrnValidateBatch(Async)");
        }

        return deleteTrnValidateBatchCall(batchId, _callback);

    }

    /**
     * Delete the request of batch of tax registration numbers validation
     * This endpoint takes the batch id and delete the running batch of tax registration numbers validation request at server side.
     * @param batchId The unique batch request identifier. (required)
     * @return TrnValidateBatchDeleteResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the request of batch of tax registration numbers validation. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error while processing request. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unhealthy. </td><td>  -  </td></tr>
     </table>
     */
    public TrnValidateBatchDeleteResponse deleteTrnValidateBatch(String batchId) throws ApiException {
        ApiResponse<TrnValidateBatchDeleteResponse> localVarResp = deleteTrnValidateBatchWithHttpInfo(batchId);
        return localVarResp.getData();
    }

    /**
     * Delete the request of batch of tax registration numbers validation
     * This endpoint takes the batch id and delete the running batch of tax registration numbers validation request at server side.
     * @param batchId The unique batch request identifier. (required)
     * @return ApiResponse&lt;TrnValidateBatchDeleteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the request of batch of tax registration numbers validation. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error while processing request. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unhealthy. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrnValidateBatchDeleteResponse> deleteTrnValidateBatchWithHttpInfo(String batchId) throws ApiException {
        okhttp3.Call localVarCall = deleteTrnValidateBatchValidateBeforeCall(batchId, null);
        Type localVarReturnType = new TypeToken<TrnValidateBatchDeleteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete the request of batch of tax registration numbers validation (asynchronously)
     * This endpoint takes the batch id and delete the running batch of tax registration numbers validation request at server side.
     * @param batchId The unique batch request identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the request of batch of tax registration numbers validation. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error while processing request. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unhealthy. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTrnValidateBatchAsync(String batchId, final ApiCallback<TrnValidateBatchDeleteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTrnValidateBatchValidateBeforeCall(batchId, _callback);
        Type localVarReturnType = new TypeToken<TrnValidateBatchDeleteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchTrnValidate
     * @param requestId The unique request identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response of tax registration number validation. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error while processing request. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unhealthy. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchTrnValidateCall(String requestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/trn/validate/{requestId}"
            .replace("{" + "requestId" + "}", localVarApiClient.escapeString(requestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchTrnValidateValidateBeforeCall(String requestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'requestId' is set
        if (requestId == null) {
            throw new ApiException("Missing the required parameter 'requestId' when calling fetchTrnValidate(Async)");
        }

        return fetchTrnValidateCall(requestId, _callback);

    }

    /**
     * Get the response of tax registration number validate request
     * This endpoint takes the request id and returns the response of the tax registration number
     * @param requestId The unique request identifier. (required)
     * @return TrnValidateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response of tax registration number validation. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error while processing request. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unhealthy. </td><td>  -  </td></tr>
     </table>
     */
    public TrnValidateResponse fetchTrnValidate(String requestId) throws ApiException {
        ApiResponse<TrnValidateResponse> localVarResp = fetchTrnValidateWithHttpInfo(requestId);
        return localVarResp.getData();
    }

    /**
     * Get the response of tax registration number validate request
     * This endpoint takes the request id and returns the response of the tax registration number
     * @param requestId The unique request identifier. (required)
     * @return ApiResponse&lt;TrnValidateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response of tax registration number validation. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error while processing request. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unhealthy. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrnValidateResponse> fetchTrnValidateWithHttpInfo(String requestId) throws ApiException {
        okhttp3.Call localVarCall = fetchTrnValidateValidateBeforeCall(requestId, null);
        Type localVarReturnType = new TypeToken<TrnValidateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the response of tax registration number validate request (asynchronously)
     * This endpoint takes the request id and returns the response of the tax registration number
     * @param requestId The unique request identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response of tax registration number validation. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error while processing request. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unhealthy. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchTrnValidateAsync(String requestId, final ApiCallback<TrnValidateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchTrnValidateValidateBeforeCall(requestId, _callback);
        Type localVarReturnType = new TypeToken<TrnValidateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchTrnValidateBatch
     * @param batchId The unique batch request identifier. (required)
     * @param offset The starting index of records to be returned. (required)
     * @param limit The limit number of records to be returned. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response of the batch of tax registration numbers validation. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error while processing request. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unhealthy. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchTrnValidateBatchCall(String batchId, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/trn/validate/batch/{batchId}"
            .replace("{" + "batchId" + "}", localVarApiClient.escapeString(batchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchTrnValidateBatchValidateBeforeCall(String batchId, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'batchId' is set
        if (batchId == null) {
            throw new ApiException("Missing the required parameter 'batchId' when calling fetchTrnValidateBatch(Async)");
        }

        // verify the required parameter 'offset' is set
        if (offset == null) {
            throw new ApiException("Missing the required parameter 'offset' when calling fetchTrnValidateBatch(Async)");
        }

        // verify the required parameter 'limit' is set
        if (limit == null) {
            throw new ApiException("Missing the required parameter 'limit' when calling fetchTrnValidateBatch(Async)");
        }

        return fetchTrnValidateBatchCall(batchId, offset, limit, _callback);

    }

    /**
     * Get the response of batch of tax registration numbers
     * This endpoint takes the batch id and returns the response of batch of tax registration numbers.
     * @param batchId The unique batch request identifier. (required)
     * @param offset The starting index of records to be returned. (required)
     * @param limit The limit number of records to be returned. (required)
     * @return TrnValidateBatchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response of the batch of tax registration numbers validation. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error while processing request. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unhealthy. </td><td>  -  </td></tr>
     </table>
     */
    public TrnValidateBatchResponse fetchTrnValidateBatch(String batchId, Integer offset, Integer limit) throws ApiException {
        ApiResponse<TrnValidateBatchResponse> localVarResp = fetchTrnValidateBatchWithHttpInfo(batchId, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Get the response of batch of tax registration numbers
     * This endpoint takes the batch id and returns the response of batch of tax registration numbers.
     * @param batchId The unique batch request identifier. (required)
     * @param offset The starting index of records to be returned. (required)
     * @param limit The limit number of records to be returned. (required)
     * @return ApiResponse&lt;TrnValidateBatchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response of the batch of tax registration numbers validation. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error while processing request. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unhealthy. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrnValidateBatchResponse> fetchTrnValidateBatchWithHttpInfo(String batchId, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = fetchTrnValidateBatchValidateBeforeCall(batchId, offset, limit, null);
        Type localVarReturnType = new TypeToken<TrnValidateBatchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the response of batch of tax registration numbers (asynchronously)
     * This endpoint takes the batch id and returns the response of batch of tax registration numbers.
     * @param batchId The unique batch request identifier. (required)
     * @param offset The starting index of records to be returned. (required)
     * @param limit The limit number of records to be returned. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response of the batch of tax registration numbers validation. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error while processing request. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unhealthy. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchTrnValidateBatchAsync(String batchId, Integer offset, Integer limit, final ApiCallback<TrnValidateBatchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchTrnValidateBatchValidateBeforeCall(batchId, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<TrnValidateBatchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for trnValidate
     * @param trnValidateRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request to validate the tax registration number submitted successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error while processing request. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unhealthy. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call trnValidateCall(TrnValidateRequest trnValidateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = trnValidateRequest;

        // create path and map variables
        String localVarPath = "/trn/validate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call trnValidateValidateBeforeCall(TrnValidateRequest trnValidateRequest, final ApiCallback _callback) throws ApiException {
        return trnValidateCall(trnValidateRequest, _callback);

    }

    /**
     * Validate the tax registration number
     * This endpoint takes the details of tax registration number and validate.
     * @param trnValidateRequest  (optional)
     * @return TrnValidateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request to validate the tax registration number submitted successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error while processing request. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unhealthy. </td><td>  -  </td></tr>
     </table>
     */
    public TrnValidateResponse trnValidate(TrnValidateRequest trnValidateRequest) throws ApiException {
        ApiResponse<TrnValidateResponse> localVarResp = trnValidateWithHttpInfo(trnValidateRequest);
        return localVarResp.getData();
    }

    /**
     * Validate the tax registration number
     * This endpoint takes the details of tax registration number and validate.
     * @param trnValidateRequest  (optional)
     * @return ApiResponse&lt;TrnValidateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request to validate the tax registration number submitted successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error while processing request. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unhealthy. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrnValidateResponse> trnValidateWithHttpInfo(TrnValidateRequest trnValidateRequest) throws ApiException {
        okhttp3.Call localVarCall = trnValidateValidateBeforeCall(trnValidateRequest, null);
        Type localVarReturnType = new TypeToken<TrnValidateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Validate the tax registration number (asynchronously)
     * This endpoint takes the details of tax registration number and validate.
     * @param trnValidateRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request to validate the tax registration number submitted successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error while processing request. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unhealthy. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call trnValidateAsync(TrnValidateRequest trnValidateRequest, final ApiCallback<TrnValidateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = trnValidateValidateBeforeCall(trnValidateRequest, _callback);
        Type localVarReturnType = new TypeToken<TrnValidateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for trnValidateBatch
     * @param trnValidateBatchRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request to validate the batch of tax registration numbers being processed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error while processing request. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unhealthy. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call trnValidateBatchCall(TrnValidateBatchRequest trnValidateBatchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = trnValidateBatchRequest;

        // create path and map variables
        String localVarPath = "/trn/validate/batch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call trnValidateBatchValidateBeforeCall(TrnValidateBatchRequest trnValidateBatchRequest, final ApiCallback _callback) throws ApiException {
        return trnValidateBatchCall(trnValidateBatchRequest, _callback);

    }

    /**
     * Validate the tax registration numbers in batch
     * This endpoint takes the batch of tax registration numbers and validate.
     * @param trnValidateBatchRequest  (optional)
     * @return TrnValidateBatchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request to validate the batch of tax registration numbers being processed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error while processing request. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unhealthy. </td><td>  -  </td></tr>
     </table>
     */
    public TrnValidateBatchResponse trnValidateBatch(TrnValidateBatchRequest trnValidateBatchRequest) throws ApiException {
        ApiResponse<TrnValidateBatchResponse> localVarResp = trnValidateBatchWithHttpInfo(trnValidateBatchRequest);
        return localVarResp.getData();
    }

    /**
     * Validate the tax registration numbers in batch
     * This endpoint takes the batch of tax registration numbers and validate.
     * @param trnValidateBatchRequest  (optional)
     * @return ApiResponse&lt;TrnValidateBatchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request to validate the batch of tax registration numbers being processed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error while processing request. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unhealthy. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrnValidateBatchResponse> trnValidateBatchWithHttpInfo(TrnValidateBatchRequest trnValidateBatchRequest) throws ApiException {
        okhttp3.Call localVarCall = trnValidateBatchValidateBeforeCall(trnValidateBatchRequest, null);
        Type localVarReturnType = new TypeToken<TrnValidateBatchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Validate the tax registration numbers in batch (asynchronously)
     * This endpoint takes the batch of tax registration numbers and validate.
     * @param trnValidateBatchRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request to validate the batch of tax registration numbers being processed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Unauthorized request. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected error while processing request. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service is unhealthy. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call trnValidateBatchAsync(TrnValidateBatchRequest trnValidateBatchRequest, final ApiCallback<TrnValidateBatchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = trnValidateBatchValidateBeforeCall(trnValidateBatchRequest, _callback);
        Type localVarReturnType = new TypeToken<TrnValidateBatchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
